#Ось приклад коду на Python, який демонструє використання конструкції `try`, `except` та `finally` для обробки помилок:

def divide_numbers(a, b):
    try:
        result = a / b
        print(f"Результат: {result}")
    except ZeroDivisionError:
        print("Помилка: Ділення на нуль!")
    except TypeError:
        print("Помилка: Неправильний тип даних! Переконайтесь, що обидва аргументи - числа.")
    finally:
        print("Виконання завершено.")

# Приклад виклику функції з помилкою
divide_numbers(10, 0)  # Ділення на нуль
divide_numbers(10, "5")  # Неправильний тип даних

### Пояснення:
#1. **`try`**: Тут ви намагаєтеся виконати ділення `a / b`. Якщо все йде добре, результат виводиться.
#2. **`except ZeroDivisionError`**: Якщо ви намагаєтеся поділити на нуль, ця частина обробить помилку і виведе повідомлення.
#3. **`except TypeError`**: Якщо ви намагаєтеся поділити число на рядок або інший неправильний тип, ця частина обробить цю помилку.
#4. **`finally`**: Цей блок виконується в будь-якому випадку, навіть якщо виникла помилка. Тут ви можете додати код для очищення ресурсів або виконання інших дій, які потрібно завершити. 

### Приклади виклику:
#- `divide_numbers(10, 0)` викликає помилку ділення на нуль.
#- `divide_numbers(10, "5")` викликає помилку через неправильний тип даних.